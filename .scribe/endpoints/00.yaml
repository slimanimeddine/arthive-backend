name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/sign-up
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign Up'
      description: 'Creates a new user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      username:
        name: username
        description: 'A unique username for the user. Must contain only letters, numbers, dashes and underscores. Must be at least 3 characters. Must not be greater than 255 characters.'
        required: true
        example: johndoe
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user. Must be unique. Must be a valid email address.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'A secure password for the user. Must be at least 8 characters long. Must be at least 8 characters.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      username: johndoe
      email: johndoe@gmail.com
      password: password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "User created successfully",
               "status": 204
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/sign-in
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign In'
      description: 'Signs in a user and returns an auth token'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user attempting to sign in. Must be a valid email address.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password associated with the user account. Must be at least 8 characters.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
      password: password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Authenticated",
               "data": {
                   "token": "{YOUR_AUTH_KEY}",
                   "id": 1
               },
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Invalid credentials",
               "status": 401
          }
        headers: []
        description: 'Invalid credentials'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/sign-out
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign Out'
      description: 'Signs out a user and deletes the auth token'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Signed out successfully",
               "status": 204
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Dc8eVZah6PE1ga45dbvf6k3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/change-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change Password'
      description: 'Changes the password of the authenticated user'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: 'The current password of the user.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'The new password of the user. Must be at least 8 characters.'
        required: true
        example: new_password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: password
      new_password: new_password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Password updated successfully",
               "status": 204
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 422
        content: |-
          {
               "message": "Invalid current password",
               "status": 422
          }
        headers: []
        description: 'Invalid current password'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a16eg4VhZP5EdvD3kf68acb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/email-verification/send
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send Email Verification Code'
      description: "Sends a verification code to the authenticated user's email"
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "message": "Verification code sent successfully",
             "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
              "message": "Email already verified",
             "status": 400
          }
        headers: []
        description: 'Email already verified'
        custom: []
      -
        status: 401
        content: |-
          {
             "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5P6ek4d1cZagbDvf8ahV36E'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/email-verification/verify
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify Email Code'
      description: 'Verifies the email verification code'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      code:
        name: code
        description: "The verification code sent to the user's email."
        required: true
        example: '123456'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      code: '123456'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "message": "Email verified successfully",
             "status": 204
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
             "message": "Invalid code",
            "status": 400
          }
        headers: []
        description: 'Invalid code'
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Email already verified",
           "status": 400
           }
        headers: []
        description: 'Email already verified'
        custom: []
      -
        status: 401
        content: |-
          {
             "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3eaZPDvVfEh6c8k56ba1d4g'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/forgot-password-code/send
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send Forgot Password Code'
      description: "Sends a forgot password code to the user's email"
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email of the user. Must be a valid email address. The <code>email</code> of an existing record in the users table.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Forgot password code sent successfully",
               "status": 204
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/forgot-password-code/verify
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify Forgot Password Code'
      description: "Verifies the forgot password code sent to the user's email"
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user requesting password reset. Must be a valid email address. The <code>email</code> of an existing record in the users table.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      code:
        name: code
        description: "The verification code sent to the user's email. Must be 6 characters."
        required: true
        example: '123456'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
      code: '123456'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "message": "Code verified successfully",
             "data": {
               "token" => "flsqjdfmjfqlsjkf"
               },
              "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
             "message": "Invalid code",
            "status": 400
          }
        headers: []
        description: 'Invalid code'
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Code expired",
           "status": 400
          }
        headers: []
        description: 'Code expired'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "User not found",
           "status": 404
          }
        headers: []
        description: 'User not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/password/reset
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset Password'
      description: "Resets the user's password"
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user requesting the password reset. Must be a valid email address. The <code>email</code> of an existing record in the users table.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'The new password for the user. Must be at least 8 characters.'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      token:
        name: token
        description: 'The password reset token.'
        required: true
        example: 1234567890abcdef
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
      new_password: newpassword123
      token: 1234567890abcdef
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Password reset successfully",
               "status": 204
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
               "message": "Invalid token",
               "status": 400
          }
        headers: []
        description: 'Invalid token'
        custom: []
      -
        status: 404
        content: |-
          {
               "message": "User not found",
               "status": 404
          }
        headers: []
        description: 'User not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/v1/users/me
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete User'
      description: 'Deletes the authenticated user'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "User deleted successfully",
              "status": 204
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
              "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6P5d3cE8Va1eD4h6Zvkafbg'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/admin/sign-in
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Admin Sign In'
      description: 'Signs in an admin user and returns an auth token'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user attempting to sign in. Must be a valid email address.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password associated with the user account. Must be at least 8 characters.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
      password: password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "message": "Authenticated",
           "data": {
               "token": "{YOUR_AUTH_KEY}",
               "id": 1
           },
           "status": 200
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Invalid credentials",
               "status": 401
          }
        headers: []
        description: 'Invalid credentials'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
